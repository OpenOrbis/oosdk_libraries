/* BEGIN_HEADER */
#include <polarssl/ecdh.h>
/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:POLARSSL_ECDH_C
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void ecdh_primitive_random( int id )
{
    ecp_group grp;
    ecp_point qA, qB;
    mpi dA, dB, zA, zB;
    rnd_pseudo_info rnd_info;

    ecp_group_init( &grp );
    ecp_point_init( &qA ); ecp_point_init( &qB );
    mpi_init( &dA ); mpi_init( &dB );
    mpi_init( &zA ); mpi_init( &zB );
    memset( &rnd_info, 0x00, sizeof( rnd_pseudo_info ) );

    TEST_ASSERT( ecp_use_known_dp( &grp, id ) == 0 );

    TEST_ASSERT( ecdh_gen_public( &grp, &dA, &qA, &rnd_pseudo_rand, &rnd_info )
                 == 0 );
    TEST_ASSERT( ecdh_gen_public( &grp, &dB, &qB, &rnd_pseudo_rand, &rnd_info )
                 == 0 );
    TEST_ASSERT( ecdh_compute_shared( &grp, &zA, &qB, &dA,
                                      &rnd_pseudo_rand, &rnd_info ) == 0 );
    TEST_ASSERT( ecdh_compute_shared( &grp, &zB, &qA, &dB,
                                      NULL, NULL ) == 0 );

    TEST_ASSERT( mpi_cmp_mpi( &zA, &zB ) == 0 );

exit:
    ecp_group_free( &grp );
    ecp_point_free( &qA ); ecp_point_free( &qB );
    mpi_free( &dA ); mpi_free( &dB );
    mpi_free( &zA ); mpi_free( &zB );
}
/* END_CASE */

/* BEGIN_CASE */
void ecdh_primitive_testvec( int id, char *dA_str, char *xA_str, char *yA_str,
                             char *dB_str, char *xB_str, char *yB_str,
                             char *z_str )
{
    ecp_group grp;
    ecp_point qA, qB;
    mpi dA, dB, zA, zB, check;
    unsigned char rnd_buf_A[POLARSSL_ECP_MAX_BYTES];
    unsigned char rnd_buf_B[POLARSSL_ECP_MAX_BYTES];
    rnd_buf_info rnd_info_A, rnd_info_B;

    ecp_group_init( &grp );
    ecp_point_init( &qA ); ecp_point_init( &qB );
    mpi_init( &dA ); mpi_init( &dB );
    mpi_init( &zA ); mpi_init( &zB ); mpi_init( &check );

    TEST_ASSERT( ecp_use_known_dp( &grp, id ) == 0 );

    rnd_info_A.buf = rnd_buf_A;
    rnd_info_A.length = unhexify( rnd_buf_A, dA_str );

    /* Fix rnd_buf_A by shifting it left if necessary */
    if( grp.nbits % 8 != 0 )
    {
        unsigned char shift = 8 - ( grp.nbits % 8 );
        size_t i;

        for( i = 0; i < rnd_info_A.length - 1; i++ )
            rnd_buf_A[i] = rnd_buf_A[i] << shift
                         | rnd_buf_A[i+1] >> ( 8 - shift );

        rnd_buf_A[rnd_info_A.length-1] <<= shift;
    }

    rnd_info_B.buf = rnd_buf_B;
    rnd_info_B.length = unhexify( rnd_buf_B, dB_str );

    /* Fix rnd_buf_B by shifting it left if necessary */
    if( grp.nbits % 8 != 0 )
    {
        unsigned char shift = 8 - ( grp.nbits % 8 );
        size_t i;

        for( i = 0; i < rnd_info_B.length - 1; i++ )
            rnd_buf_B[i] = rnd_buf_B[i] << shift
                         | rnd_buf_B[i+1] >> ( 8 - shift );

        rnd_buf_B[rnd_info_B.length-1] <<= shift;
    }

    TEST_ASSERT( ecdh_gen_public( &grp, &dA, &qA,
                                  rnd_buffer_rand, &rnd_info_A ) == 0 );
    TEST_ASSERT( ! ecp_is_zero( &qA ) );
    TEST_ASSERT( mpi_read_string( &check, 16, xA_str ) == 0 );
    TEST_ASSERT( mpi_cmp_mpi( &qA.X, &check ) == 0 );
    TEST_ASSERT( mpi_read_string( &check, 16, yA_str ) == 0 );
    TEST_ASSERT( mpi_cmp_mpi( &qA.Y, &check ) == 0 );

    TEST_ASSERT( ecdh_gen_public( &grp, &dB, &qB,
                                  rnd_buffer_rand, &rnd_info_B ) == 0 );
    TEST_ASSERT( ! ecp_is_zero( &qB ) );
    TEST_ASSERT( mpi_read_string( &check, 16, xB_str ) == 0 );
    TEST_ASSERT( mpi_cmp_mpi( &qB.X, &check ) == 0 );
    TEST_ASSERT( mpi_read_string( &check, 16, yB_str ) == 0 );
    TEST_ASSERT( mpi_cmp_mpi( &qB.Y, &check ) == 0 );

    TEST_ASSERT( mpi_read_string( &check, 16, z_str ) == 0 );
    TEST_ASSERT( ecdh_compute_shared( &grp, &zA, &qB, &dA, NULL, NULL ) == 0 );
    TEST_ASSERT( mpi_cmp_mpi( &zA, &check ) == 0 );
    TEST_ASSERT( ecdh_compute_shared( &grp, &zB, &qA, &dB, NULL, NULL ) == 0 );
    TEST_ASSERT( mpi_cmp_mpi( &zB, &check ) == 0 );

exit:
    ecp_group_free( &grp );
    ecp_point_free( &qA ); ecp_point_free( &qB );
    mpi_free( &dA ); mpi_free( &dB );
    mpi_free( &zA ); mpi_free( &zB ); mpi_free( &check );
}
/* END_CASE */

/* BEGIN_CASE */
void ecdh_exchange( int id )
{
    ecdh_context srv, cli;
    unsigned char buf[1000];
    const unsigned char *vbuf;
    size_t len;
    rnd_pseudo_info rnd_info;

    ecdh_init( &srv );
    ecdh_init( &cli );
    memset( &rnd_info, 0x00, sizeof( rnd_pseudo_info ) );

    TEST_ASSERT( ecp_use_known_dp( &srv.grp, id ) == 0 );

    memset( buf, 0x00, sizeof( buf ) ); vbuf = buf;
    TEST_ASSERT( ecdh_make_params( &srv, &len, buf, 1000,
                                   &rnd_pseudo_rand, &rnd_info ) == 0 );
    TEST_ASSERT( ecdh_read_params( &cli, &vbuf, buf + len ) == 0 );

    memset( buf, 0x00, sizeof( buf ) );
    TEST_ASSERT( ecdh_make_public( &cli, &len, buf, 1000,
                                   &rnd_pseudo_rand, &rnd_info ) == 0 );
    TEST_ASSERT( ecdh_read_public( &srv, buf, len ) == 0 );

    TEST_ASSERT( ecdh_calc_secret( &srv, &len, buf, 1000,
                                   &rnd_pseudo_rand, &rnd_info ) == 0 );
    TEST_ASSERT( ecdh_calc_secret( &cli, &len, buf, 1000, NULL, NULL ) == 0 );
    TEST_ASSERT( mpi_cmp_mpi( &srv.z, &cli.z ) == 0 );

exit:
    ecdh_free( &srv );
    ecdh_free( &cli );
}
/* END_CASE */
